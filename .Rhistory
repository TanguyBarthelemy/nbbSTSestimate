}
}
if(!is.null(cal.effect.df)){
cal.effect <- cal.effect.df[1,2]
cal.effect.td <- cal.effect.df[1,3]
cal.effect.easter <- cal.effect.df[1,4]
cal.effect.df <- NULL
}
}
stsmodel
stsmodel<-match.arg(stsmodel)
stsmodel<-check_stsmodel(x, stsmodel)
stsmodel
iv_list<-handle_outliers_data(x, outliers.df)
iv_list
outliers.df<-data.frame(series_name=c("inami_soins", "inami_soins"),
outliers=c("LS_2015Q2", "AO_2022Q1"))
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
outliers.data
outliers.data <- outliers.df
outliers.data
outliers.data<-data.frame(lapply(outliers.data, as.character), stringsAsFactors=FALSE)
series_names<-outliers.data$series_name
for(s in series_names){
if(!s %in% colnames(x)){
stop(paste0("The series name ", s, " is mentionned in outliers.data but it is not found in the data. Please check your input."))
}
}
x
is.vector(outliers.data)
if(is.vector(outliers.data)){
if(is.null(ncol(x))){
n<-1
}
}else{
if(!is.data.frame(outliers.data)){
stop("Since you mentionned outliers = 'userdefined', you must provide the outliers as a data.frame in 'outliers.data'.
The outliers should contain two columns: the first one called 'series_name' and the second one called 'outliers'.
The outliers should be mentionned in a specific format (e.g. AO_2020Q2, AO_2020M4) or they can be defined as 'auto'.")
}else{
if(all(colnames(outliers.data) %in% c("series_name", "outliers"))){
outliers.data<-data.frame(lapply(outliers.data, as.character), stringsAsFactors=FALSE)
series_names<-outliers.data$series_name
## series name in outliers.data but not in the data
for(s in series_names){
if(!s %in% colnames(x)){
stop(paste0("The series name ", s, " is mentionned in outliers.data but it is not found in the data. Please check your input."))
}
}
## series name in the data but not in outliers.data
x_series_names<-colnames(x)[-1]
for(s in x_series_names){
if(!s %in% series_names){
outliers.data<-rbind(outliers.data, c(s, "auto"))
warning(paste0("The series name ", s, " is in the data but it is not mentionned in outliers.data. An outliers='auto' was defined by default for this series."), call. = FALSE)
}
}
}else{
stop("For outliers.data, if outliers='userdefined', you must provide a data.frame with two columns called 'series_name' and 'outliers'.")
}
}
n<-length(series_names)
}
outliers
iv_list<-handle_outliers_data(x, outliers.df)
iv_list
x
outliers.df
outliers.data
handle_outliers_data <- function(x, outliers.data){
if(is.vector(outliers.data)){
if(is.null(ncol(x))){
n<-1
}
}else{
if(!is.data.frame(outliers.data)){
stop("Since you mentionned outliers = 'userdefined', you must provide the outliers as a data.frame in 'outliers.data'.
The outliers should contain two columns: the first one called 'series_name' and the second one called 'outliers'.
The outliers should be mentionned in a specific format (e.g. AO_2020Q2, AO_2020M4) or they can be defined as 'auto'.")
}else{
if(all(colnames(outliers.data) %in% c("series_name", "outliers"))){
outliers.data<-data.frame(lapply(outliers.data, as.character), stringsAsFactors=FALSE)
series_names<-outliers.data$series_name
## series name in outliers.data but not in the data
for(s in series_names){
if(!s %in% colnames(x)){
stop(paste0("The series name ", s, " is mentionned in outliers.data but it is not found in the data. Please check your input."))
}
}
## series name in the data but not in outliers.data
x_series_names<-colnames(x)[-1]
for(s in x_series_names){
if(!s %in% series_names){
outliers.data<-rbind(outliers.data, c(s, "auto"))
warning(paste0("The series name ", s, " is in the data but it is not mentionned in outliers.data. An outliers='auto' was defined by default for this series."), call. = FALSE)
}
}
}else{
stop("For outliers.data, if outliers='userdefined', you must provide a data.frame with two columns called 'series_name' and 'outliers'.")
}
}
n<-length(series_names)
}
iv_list<-list() # initialization output
for(j in 1:n){
if(is.data.frame(outliers.data)){
series_name<-series_names[j]
xj<-x[,series_name]
outliers<-as.character(outliers.data[outliers.data$series_name==series_name,]$outliers)
}else{
series_name<-fifelse(is.null(names(x)), "iv", "names(x)")
xj<-x
outliers<-outliers.data
}
if(any(outliers == "auto")){
iv_list[[j]]<-"auto"
names(iv_list)[j] <- series_name
}else{
type<-substr(outliers,1,2)
for(t in type){
if(!t %in% c('AO','LS','TC','SO')){
stop(paste0(t, " is not a proper type of outliers. Only AO, LS, TC and SO are handled."))
}
}
yr<-substr(outliers,4,7)
per<-substr(outliers,9,10)
for(i in 1:length(yr)){
yri<-as.numeric(yr[i])
peri<-as.numeric(per[i])
if(is.na(yri)){stop(paste0(yri, " is not a proper year in outliers definition."))}
if(is.na(peri)){stop(paste0(peri, " is not a proper quarter or month in outliers definition."))}
if(yri<start(x)[1] | yri>end(x)[1] | (yri==start(x)[1] & peri<start(x)[2]) | (yri==end(x)[1] & peri>end(x)[2])) {
stop(paste0("The outlier ", outliers[i], " is outside the range of the series."))
}
}
freq_outliers<-substr(outliers,8,8)
if(frequency(x)==4){
if(!all(freq_outliers=="Q")){stop("Frequency declared in outliers description does not match the actual frequency of the series.")}
}else if(frequency(x)==12){
if(!all(freq_outliers=="M")){stop("Frequency declared in outliers description does not match the actual frequency of the series.")}
}
for(i in 1:length(outliers)){
outlier_decimal<-decimal_period(as.numeric(yr[i]),as.numeric(per[i]),frequency(x))
pos<-which(time(x) == outlier_decimal)
if(type[i]=='AO'){
iv<-ao_variable(s=xj, pos=pos)
} else if(type[i]=='LS'){
iv<-ls_variable(s=xj, pos=pos)
} else if(type[i]=='TC'){
iv<-tc_variable(s=xj, pos=pos)
} else if(type[i]=='SO'){
iv<-so_variable(s=xj, pos=pos)
}
if(i==1){
ivs<-matrix(iv,ncol=1)
}else{
ivs<-cbind(ivs,iv)
}
}
ivs<-ts(ivs, start = start(x), frequency = frequency(x))
colnames(ivs)<-outliers
iv_list[[j]]<-ivs
names(iv_list)[j] <- series_name
}
}
return(iv_list)
}
iv_list<-handle_outliers_data(x, outliers.df)
length(series_names)
series_names
iv_list<-list() # initialization output
is.data.frame(outliers.data)
series_name<-series_names[j]
j<-1
series_name<-series_names[j]
xj<-x[,series_name]
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
iv_list<-handle_outliers_data(x, outliers.df)
series_name<-series_names[j]
if(is.mts(x)) xj<-x[,series_name]
else xj<-x
if(is.mts(x)) xj<-x[,series_name] else xj<-x
xj
outliers<-as.character(outliers.data[outliers.data$series_name==series_name,]$outliers)
outliers
outliers
type<-substr(outliers,1,2)
for(t in type){
if(!t %in% c('AO','LS','TC','SO')){
stop(paste0(t, " is not a proper type of outliers. Only AO, LS, TC and SO are handled."))
}
}
yr<-substr(outliers,4,7)
per<-substr(outliers,9,10)
yr
per
for(i in 1:length(yr)){
yri<-as.numeric(yr[i])
peri<-as.numeric(per[i])
if(is.na(yri)){stop(paste0(yri, " is not a proper year in outliers definition."))}
if(is.na(peri)){stop(paste0(peri, " is not a proper quarter or month in outliers definition."))}
if(yri<start(x)[1] | yri>end(x)[1] | (yri==start(x)[1] & peri<start(x)[2]) | (yri==end(x)[1] & peri>end(x)[2])) {
stop(paste0("The outlier ", outliers[i], " is outside the range of the series."))
}
}
freq_outliers<-substr(outliers,8,8)
freq_outliers
length(outliers)
outlier_decimal<-decimal_period(as.numeric(yr[i]),as.numeric(per[i]),frequency(x))
pos<-which(time(x) == outlier_decimal)
outlier_decimal
pos
i
if(type[i]=='AO'){
iv<-ao_variable(s=xj, pos=pos)
} else if(type[i]=='LS'){
iv<-ls_variable(s=xj, pos=pos)
} else if(type[i]=='TC'){
iv<-tc_variable(s=xj, pos=pos)
} else if(type[i]=='SO'){
iv<-so_variable(s=xj, pos=pos)
}
i<-1
outlier_decimal<-decimal_period(as.numeric(yr[i]),as.numeric(per[i]),frequency(x))
pos<-which(time(x) == outlier_decimal)
if(type[i]=='AO'){
iv<-ao_variable(s=xj, pos=pos)
} else if(type[i]=='LS'){
iv<-ls_variable(s=xj, pos=pos)
} else if(type[i]=='TC'){
iv<-tc_variable(s=xj, pos=pos)
} else if(type[i]=='SO'){
iv<-so_variable(s=xj, pos=pos)
}
if(i==1){
ivs<-matrix(iv,ncol=1)
}else{
ivs<-cbind(ivs,iv)
}
ivs
ivs<-ts(ivs, start = start(x), frequency = frequency(x))
for(i in 1:length(outliers)){
outlier_decimal<-decimal_period(as.numeric(yr[i]),as.numeric(per[i]),frequency(x))
pos<-which(time(x) == outlier_decimal)
if(type[i]=='AO'){
iv<-ao_variable(s=xj, pos=pos)
} else if(type[i]=='LS'){
iv<-ls_variable(s=xj, pos=pos)
} else if(type[i]=='TC'){
iv<-tc_variable(s=xj, pos=pos)
} else if(type[i]=='SO'){
iv<-so_variable(s=xj, pos=pos)
}
if(i==1){
ivs<-matrix(iv,ncol=1)
}else{
ivs<-cbind(ivs,iv)
}
}
ivs
ivs<-ts(ivs, start = start(x), frequency = frequency(x))
ivs
colnames(ivs)<-outliers
colnames(ivs)<-outliers
ivs
series_names
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
iv_list<-handle_outliers_data(x, outliers.df)
iv_list
out <- list()
class(out) <- "nbb.estimateSTS.output"
if(is.null(ncol(x))){
nr<-length(x)
nc<-1
}else{
nr<-nrow(x)
nc<-ncol(x)
}
x_imputed<-as.data.frame(matrix(nrow=nr,ncol=nc))
colnames(x_imputed)<-colnames(x)
freq<-frequency(x)
n<-ifelse(is.null(ncol(x)),1,ncol(x))
n
namei<-fifelse(is.null(names(x)), "series", "names(x)")
xi<-x
xi_lf<-x.lf
namei
if(!is.null(xi_lf)){
xi_dt<-data.table(xi)
xi_lf_dt<-data.table(xi_lf)
freq_lf<-frequency(xi_lf)
## Define time group variable for cumulative sum
gvar<-create_time_gvar(xi, freq_lf)
gvar_lf<-create_time_gvar(xi_lf, freq_lf)
xi_dt[,group:=gvar]
xi_lf_dt[,group:=gvar_lf]
## Calculate cumulative sum
xi_dt[, xic := cumsum(xi), by = group]
## Integrate lf input
pos_xi_lastby<-xi_dt[,.(group)]
pos_xi_lastby[,pos := .I]
pos_xi_lastby<-pos_xi_lastby[,.SD[.N],by=group]
xi_lf_dt<-merge(xi_lf_dt, pos_xi_lastby, by="group")
pos_lf<-xi_lf_dt$pos
value_lf<-xi_lf_dt$x
xi_lf_hf<-rep(NA,nrow(xi_dt))
xi_lf_hf[pos_lf]<-value_lf
xi_dt<-cbind(xi_dt, xi_lf_hf)
xi_dt[, xicc := fifelse(is.na(xi_lf_hf), xic, xi_lf_hf)]
## Check coherence between LF and HF data
xi_dt[, diff_lf_hf := xi_lf_hf - xic]
xi_dt[, diff_lf_hf_rel := abs(fifelse(xic != 0, diff_lf_hf/xic, diff_lf_hf))]
if (any(!is.na(xi_dt[,diff_lf_hf]) & xi_dt[,diff_lf_hf_rel] > 0.001)){
warning(paste0(namei,": The series could not be processed. This is because some LF data do not match the sum of the corresponding HF data. Please check your input and use a benchmarking tool for this series if necessary."), call. = FALSE)
out[[i]] <- list(NULL)
names(out)[i] <- namei
x_imputed[,i] <- ts(NA, start=start(x), frequency=freq)
next
}
## Deal with partially missing data on LF period(s)
pmd_lf_dt<-xi_dt[!is.na(xi) & is.na(xic)]
if(nrow(pmd_lf_dt) > 0){
concerned_groups<-unique(pmd_lf_dt$group)
processable<-TRUE
for(g in concerned_groups){
xi_dt[group == g, xi_lead := as.numeric(shift(xi,-1))]
for(k in 1:(freq-1)){
xi_dt[group == g, xicc_lead := shift(xicc,-1)]
xi_dt[group == g & is.na(xicc) & !is.na(xi_lead) & !is.na(xicc_lead) , xicc := xicc_lead - xi_lead]
}
if(nrow(xi_dt[group == g & (!is.na(xi_lead) & is.na(xicc))]) > 0) processable<-FALSE
}
if(!processable){
warning(paste0(namei,": The series could not processed. This is because missing/non-missing data within some LF period are not regrouped and, therefore, cumulated data could not be computed. These cases cannot yet be handled."), call. = FALSE)
out[[i]] <- list(NULL)
names(out)[i] <- namei
x_imputed[,i] <- ts(NA, start=start(xi), frequency=freq)
next
}
}
## Model input
xi_run<-ts(xi_dt$xicc, start = start(xi), frequency = freq)
cumulator<-TRUE
ratio_hflf<-freq/freq_lf
}else{
xi_run<- xi
cumulator<-FALSE
ratio_hflf<-NA
}
xi_run
stsmodel<-stsmodel_df[stsmodel_df$series_name == namei,]$stsmodel
auto_model<-fifelse(stsmodel == "auto", TRUE, FALSE)
auto_model
is_seasonal(xi)
stsmodel_selected<-"bsm"
ifelse(iv_list[[namei]] == "auto", outliers<-"auto", regiv<-iv_list[[namei]])
namei
iv_list
namei
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
rslt$series$regressors
plot(rslt)
res2<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R.xlsx", path.output = NULL)
res2$inami_soins2$regressors
res2$inami_soins$regressors
rslt2 <- estimateSTS(x, x.lf)
rslt2$series$regressors
rslt3 <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = c("LS_2015Q2", "AO_2022Q1"))
x<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx", sheet = "x"))
x.lf<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R_test.xlsx", sheet = "x.lf"))
options(error = NULL)
x<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx", sheet = "x"))
x.lf<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx", sheet = "x.lf"))
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi$inami_soins$regressors
test_multi$alloc_fam$regressors
test_multi$alloc_fam_back$regressors
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
j
ivs
iv_list
j
outliers
series_names[j]
series_names
unique(series_names)
outliers.data
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi$inami_soins$regressors
test_multi$alloc_fam$regressors
test_multi$alloc_fam_back$regressors
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
jh
j
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
iv_list
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
iv_list
outliers
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
options(error = NULL)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
namei
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
namei
debugSource("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
namei
namei
i
iv_list[[namei]]
iv_list[[namei]]
iv_list <- c("LS_28", "AO_32")
test<-"auto"
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
iv_list
iv_list[[namei]]
iv_list[[namei]] == "auto"
iv_list[[2]]
iv_list[[namei]] == "auto"
if(iv_list[[namei]] == "auto"){
outliers_i<-"auto"
}
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
# Example 1
options(error = recover)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
# Exemple 3: QNA
res<-estimateSTS_fromXLSX("input_to_R_QA_QB.xlsx", is.lf = FALSE, path.output = "output_QA_QB.xlsx")
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
outliers_i
is.character(outliers_i)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
outliers_i
class(outliers_i)
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/main_functions.R", echo=TRUE)
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi$inami_soins$regressors
test_multi$alloc_fam$regressors
test_multi$alloc_fam_back$regressors
# Example 1
options(error = NULL)
res<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", path.output = NULL)
res$series$regressors
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi$alloc_fam_back$regressors
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
x
x<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", sheet = "x"))
x.lf<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", sheet = "x.lf"))
outliers.df<-data.frame(series_name=c("inami_soins", "inami_soins"),
outliers=c("LS_2015Q2", "AO_2022Q1"))
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
rslt$series$regressors
?estimate
test_multi <- estimateSTS_fromXLSX("E:/Documents/LEMASSO/State space/nbbSTSestimate/Data Academy - nbbSTSestimate/input_to_R.xlsx")
test_multi$alloc_fam$regressors
x<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", sheet = "x"))
x.lf<-as.data.frame(read_excel("E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", sheet = "x.lf"))
outliers.df<-data.frame(series_name=c("inami_soins", "inami_soins"),
outliers=c("LS_2015Q2", "AO_2022Q1"))
rslt <- estimateSTS(x, x.lf, outliers = "userdefined", outliers.df = outliers.df)
rslt$series$table
plot((res))
res$series$regressors
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
res<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", path.output = NULL)
res$series$table
?estimate
plot(res)
res$series$regressors$regressors
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
res<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", path.output = NULL)
plot(res)
res$series$regressors$regressors
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
res<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", path.output = NULL)
plot(res)
res$series$regressors$regressors
res$series$table
source("E:/Documents/LEMASSO/State space/nbbSTSestimate/RCode/utility_functions.R", echo=TRUE)
res<-estimateSTS_fromXLSX(path.data = "E:/Documents/LEMASSO/State space/nbbSTSestimate/S13/input_to_R_test.xlsx", path.output = NULL)
plot(res)
res$series$table
